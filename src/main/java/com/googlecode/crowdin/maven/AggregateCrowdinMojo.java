package com.googlecode.crowdin.maven;

import com.googlecode.crowdin.maven.tool.SortedProperties;
import org.apache.maven.model.Resource;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

import java.io.*;

/**
 * Aggregate the translations of this project with crowdin
 */
@Mojo(name = "aggregate", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, threadSafe = true)
public class AggregateCrowdinMojo extends AbstractMojo {

    private static final String DEFAULT_LANG = "en";

    public static final String COMMENT = "This file is automatically generated. Please do not edit this file. "
            + "If you'd like to change the content please use crowdin";

    /**
     * The current Maven project
     */
    @Parameter(readonly = true, required = true)
    protected MavenProject project;

    /**
     * The directory where the generated resource files will be stored. The
     * directory will be registered as a resource root of the project such that
     * the generated files will participate in later build phases like packaing.
     */
    @Parameter(defaultValue = "${project.build.directory}/generated-resources/messages-aggregated", required = true)
    protected File resourceAggregatedOutputDirectory;

    /**
     * The directory where the messages can be fund.
     */
    @Parameter(defaultValue = "${project.basedir}/src/main/crowdin", required = true)
    protected File messagesOutputDirectory;

    public void execute() throws MojoExecutionException {
        if (messagesOutputDirectory.exists()) {
            getLog().info("Aggregating all message properties from dependencies");

            String[] langFolders = messagesOutputDirectory.list();

            SortedProperties defaultProperties = new SortedProperties();

            if (langFolders != null) {
                for (String langFolder : langFolders) {
                    if (langFolder.equals(DEFAULT_LANG)) {
                        File langFold = new File(messagesOutputDirectory, langFolder);
                        defaultProperties.putAll(aggregatePropertiesFolder(langFold, langFolder, null));
                    }
                }

                for (String langFolder : langFolders) {
                    if (!langFolder.startsWith(".") && !langFolder.equals(DEFAULT_LANG)) {
                        File langFold = new File(messagesOutputDirectory, langFolder);
                        if (langFold.isDirectory()) {
                            aggregatePropertiesFolder(langFold, langFolder, defaultProperties);
                        }
                    }
                }
            }

            Resource resource = new Resource();
            resource.setDirectory(resourceAggregatedOutputDirectory.getAbsolutePath());
            this.project.addResource(resource);

        } else {
            getLog().info("Crowdin folder does not exist (" + messagesOutputDirectory + "). Call pull before.");
        }
    }

    private SortedProperties aggregatePropertiesFolder(File langFolder, String lang, SortedProperties defaultProperties)
            throws MojoExecutionException {
        SortedProperties properties = new SortedProperties();
        if (defaultProperties != null) {
            properties.putAll(defaultProperties);
        }

        getLog().info("Aggregate properties for lang " + lang);
        addAllProperties(properties, langFolder);

        File propertiesFile = new File(resourceAggregatedOutputDirectory, "messages_" + lang + ".properties");
        try {
            propertiesFile.getParentFile().mkdirs();
            FileOutputStream out = new FileOutputStream(propertiesFile);
            properties.store(out, COMMENT);
            out.close();
        } catch (IOException e) {
            throw new MojoExecutionException("Failed to save " + propertiesFile, e);
        }

        return properties;
    }

    private void addAllProperties(SortedProperties properties, File folder) throws MojoExecutionException {
        File[] files = folder.listFiles();
        if (files != null) {
            for (File file : files) {
                if (!file.getName().startsWith(".")) {
                    if (file.isDirectory()) {
                        addAllProperties(properties, file);
                    } else {
                        getLog().info("Adding " + file);
                        SortedProperties someProperties = new SortedProperties();
                        try {
                            InputStream inStream = new FileInputStream(file);
                            someProperties.load(inStream);
                            inStream.close();
                        } catch (IOException e) {
                            throw new MojoExecutionException("Failed to load " + file, e);
                        }
                        properties.putAll(someProperties);
                    }
                }
            }
        }
    }

}
